import axios from "axios";
import { Scraper, SearchMode } from "agent-twitter-client";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { askGemini } from "./ask";
import dotenv from "dotenv";
import fs from "fs";

dotenv.config();

const number = Number(process.env.REPLY_LATEST_TWEET) || 5;
const rapidApiHost = process.env.RAPIDAPI_HOST || "";
const rapidApiKey = process.env.RAPIDAPI_KEY || "";

// H√†m x√≥a t·ª´ ƒë·∫ßu ti√™n c·ªßa chu·ªói
function removeFirstWord(str: string): string {
  const words = str.split(" ");
  return words.slice(1).join(" ");
}

// Helper function t·∫°o th·ªùi gian ch·ªù ng·∫´u nhi√™n
function randomSleep(min: number, max: number): Promise<void> {
  const ms = Math.floor(Math.random() * (max - min + 1)) + min;
  console.log(`ƒêang ch·ªù ${ms}ms...`);
  return new Promise((resolve) => setTimeout(resolve, ms));
}

// Helper function t·∫°o c√°c bi·∫øn th·ªÉ cho tin nh·∫Øn
function variateMessage(message: string): string {
  // T·∫°o danh s√°ch c√°c bi·∫øn th·ªÉ c√≥ th·ªÉ
  const variations = [
    message,
    message + " üëç",
    message + " üéâ",
    "Hey, " + message,
    "Check this out: " + message,
    message + " #NFT",
    message + " #Airdrop",
    "Here you go: " + message,
  ];

  // Ch·ªçn ng·∫´u nhi√™n m·ªôt bi·∫øn th·ªÉ
  return variations[Math.floor(Math.random() * variations.length)];
}

// H√†m reply tweet: t√¨m tweet m·ªõi, tr·∫£ l·ªùi v√† l∆∞u l·∫°i v√†o file replied.json
export const replyTweet = async function (
  genAI: GoogleGenerativeAI,
  scraper: Scraper,
  username: string
) {
  // L·∫•y danh s√°ch tweet
  const replyTweetsResponse = await scraper.fetchSearchTweets(
    `@${username}`,
    number,
    SearchMode.Latest
  );
  const replyTweets = replyTweetsResponse.tweets;
  console.log("S·ªë tweet fetch ƒë∆∞·ª£c:", replyTweets.length);

  // L·∫•y danh s√°ch ConversationID c·ªßa c√°c tweet m·ªõi
  const allConversationIds = replyTweets
    .filter((tweet: any) => tweet.conversationId)
    .map((tweet: any) => String(tweet.conversationId));

  console.log("ConversationIDs c·ªßa c√°c tweet m·ªõi nh·∫≠n:", allConversationIds);

  // ƒê·ªçc danh s√°ch tweets ƒë√£ reply t·ª´ file n·∫øu t·ªìn t·∫°i
  let repliedTweets: any[] = [];
  let repliedConversationIds: string[] = [];

  if (fs.existsSync("replied.json")) {
    try {
      const data = fs.readFileSync("replied.json", "utf-8");
      repliedTweets = JSON.parse(data);

      // L·∫•y t·∫•t c·∫£ conversationId ƒë√£ x·ª≠ l√Ω
      repliedConversationIds = repliedTweets
        .filter((tweet: any) => tweet.conversationId)
        .map((tweet: any) => String(tweet.conversationId));

      console.log(
        "ƒê√£ ƒë·ªçc file replied.json, c√≥",
        repliedTweets.length,
        "tweet ƒë√£ reply"
      );
      console.log("ConversationIDs ƒë√£ x·ª≠ l√Ω:", repliedConversationIds);
    } catch (error) {
      console.error("L·ªói khi ƒë·ªçc file replied.json:", error);
      repliedTweets = [];
      repliedConversationIds = [];
    }
  } else {
    console.log("Kh√¥ng t√¨m th·∫•y file replied.json, t·∫°o m·ªõi");
  }

  // T·∫°o file replied_ids.json ƒë·ªÉ d·ªÖ debug
  fs.writeFileSync(
    "replied_ids.json",
    JSON.stringify(
      {
        new_conversations: allConversationIds,
        replied_conversations: repliedConversationIds,
      },
      null,
      2
    )
  );

  // L·ªçc tweet thu·ªôc cu·ªôc h·ªôi tho·∫°i ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω
  const toReply = replyTweets.filter((tweet: any) => {
    // Ch·ªâ x·ª≠ l√Ω tweet thu·ªôc cu·ªôc h·ªôi tho·∫°i c√≥ conversationId v√† ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω
    return (
      tweet.conversationId &&
      !repliedConversationIds.includes(String(tweet.conversationId))
    );
  });

  console.log("S·ªë tweet thu·ªôc cu·ªôc h·ªôi tho·∫°i ch∆∞a x·ª≠ l√Ω:", toReply.length);

  // Bi·∫øn ƒë·ªÉ theo d√µi xem ƒë√£ x·ª≠ l√Ω tweet m·ªõi n√†o ch∆∞a
  let repliedNewTweet = false;
  let repliedTweetInfo = null;

  // Ch·ªâ x·ª≠ l√Ω tweet m·ªõi nh·∫•t (ƒë·∫ßu ti√™n trong danh s√°ch)
  if (toReply.length > 0) {
    const tweet = toReply[0]; // Ch·ªâ l·∫•y tweet ƒë·∫ßu ti√™n
    console.log("ƒêang x·ª≠ l√Ω tweet m·ªõi nh·∫•t:", tweet.id);

    const replyID = tweet.id;
    const tweetText = tweet.text || "";
    const replyContent = removeFirstWord(tweetText);

    // Ki·ªÉm tra conversationId c√≥ t·ªìn t·∫°i hay kh√¥ng
    const targetId = tweet.conversationId;
    if (!targetId) {
      console.log(`Tweet ${replyID} kh√¥ng c√≥ conversationId, b·ªè qua.`);
    } else {
      console.log(`ƒêang x·ª≠ l√Ω tweet ${replyID} v·ªõi conversationId ${targetId}`);

      // L·∫•y tweet g·ªëc theo conversationId
      const target = await scraper.getTweet(targetId);
      const targetText = target?.text || "";

      // Th·ªùi gian ch·ªù ng·∫´u nhi√™n tr∆∞·ªõc khi l·∫•y n·ªôi dung reply t·ª´ Gemini
      await randomSleep(2000, 5000);

      const contentToReply = await askGemini(
        genAI,
        "reply",
        targetText,
        replyContent
      );

      try {
        // Th·ªùi gian ch·ªù ng·∫´u nhi√™n tr∆∞·ªõc khi g·ª≠i reply
        await randomSleep(3000, 8000);

        const response = await scraper.sendTweet(contentToReply, replyID);
        console.log("ƒê√£ reply tweet id:", replyID);

        // ƒê√°nh d·∫•u l√† ƒë√£ reply m·ªôt tweet m·ªõi
        repliedNewTweet = true;
        repliedTweetInfo = {
          id: replyID,
          conversationId: targetId,
        };

        // Th√™m tweet v√†o danh s√°ch ƒë√£ reply c√πng v·ªõi timestamp
        const repliedTweet = {
          ...tweet,
          replied_at: new Date().toISOString(),
          reply_content: contentToReply,
        };
        repliedTweets.push(repliedTweet);

        // L∆∞u danh s√°ch ƒë√£ reply v√†o file
        fs.writeFileSync(
          "replied.json",
          JSON.stringify(repliedTweets, null, 2)
        );
        console.log("ƒê√£ c·∫≠p nh·∫≠t file replied.json");
      } catch (error) {
        console.error("L·ªói khi reply tweet:", error);
      }
    }
  } else {
    console.log("Kh√¥ng c√≥ cu·ªôc h·ªôi tho·∫°i m·ªõi ƒë·ªÉ reply.");
  }

  return { tweets: replyTweets, repliedNewTweet, repliedTweetInfo };
};

// H√†m ki·ªÉm tra retweet
async function checkRetweet(screenname: string, tweetId: string) {
  const options = {
    method: "GET",
    url: "https://twitter-api45.p.rapidapi.com/checkretweet.php",
    params: {
      screenname: screenname,
      tweet_id: tweetId,
    },
    headers: {
      "x-rapidapi-host": rapidApiHost,
      "x-rapidapi-key": rapidApiKey,
    },
  };

  try {
    console.log(
      `\nKi·ªÉm tra retweet c·ªßa @${screenname} cho tweet ID ${tweetId}...`
    );
    const response = await axios.request(options);
    console.log("K·∫øt qu·∫£ ki·ªÉm tra retweet:", response.data);
    return response.data;
  } catch (error) {
    console.error("L·ªói khi ki·ªÉm tra tr·∫°ng th√°i retweet:", error);
    return null;
  }
}

// H√†m get tweet detail s·ª≠ d·ª•ng API t·ª´ RapidAPI
async function getTweetDetail(conversationId: string) {
  const options = {
    method: "GET",
    url: "https://twitter-api45.p.rapidapi.com/tweet_thread.php",
    params: { id: conversationId },
    headers: {
      "x-rapidapi-host": rapidApiHost,
      "x-rapidapi-key": rapidApiKey,
    },
  };

  try {
    const response = await axios.request(options);
    const data = response.data as any; // X√°c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu l√† any ƒë·ªÉ tr√°nh l·ªói
    console.log("Chi ti·∫øt tweet thread ƒë·∫ßy ƒë·ªß:", data);

    // X·ª≠ l√Ω v√† l·∫•y th√¥ng tin c·∫ßn thi·∫øt t·ª´ thread
    if (
      data &&
      data.thread &&
      Array.isArray(data.thread) &&
      data.thread.length > 0
    ) {
      console.log("\nDanh s√°ch replies trong thread:");

      // Danh s√°ch tweets trong thread ƒë·ªÉ ki·ªÉm tra retweet
      const tweetUsers: Array<{ username: string; tweetId: string }> = [];

      // Hi·ªÉn th·ªã th√¥ng tin replies
      data.thread.forEach((reply: any, index: number) => {
        const displayText = reply.display_text || reply.text || "No text";
        const authorName = reply.author?.screen_name || "Unknown user";
        const tweetId = reply.id_str || reply.id || "";

        console.log(`[${index + 1}] @${authorName}: ${displayText}`);

        // Th√™m username v√† tweet ID v√†o danh s√°ch (n·∫øu c√≥)
        if (authorName && authorName !== "Unknown user" && tweetId) {
          tweetUsers.push({ username: authorName, tweetId: tweetId });
        }
      });

      // Ki·ªÉm tra retweet cho t·∫•t c·∫£ usernames
      console.log("\nKi·ªÉm tra retweet c·ªßa t·∫•t c·∫£ ng∆∞·ªùi d√πng trong thread...");

      // G·ªçi h√†m reply cho nh·ªØng ng∆∞·ªùi ƒë√£ retweet
      await replyToRetweeters(global.scraper, conversationId, tweetUsers);
    } else {
      console.log("Kh√¥ng c√≥ replies trong thread.");
    }
  } catch (error) {
    console.error("L·ªói khi l·∫•y tweet thread:", error);
  }
}

// H√†m reply ng∆∞·ªùi d√πng ƒë√£ retweet - s·ª≠a l·∫°i ƒë·ªÉ reply tr·ª±c ti·∫øp v√†o tweet id
async function replyToRetweeters(
  scraper: Scraper,
  tweetId: string,
  tweetUsers: Array<{ username: string; tweetId: string }>
) {
  console.log("\nB·∫Øt ƒë·∫ßu reply cho nh·ªØng ng∆∞·ªùi ƒë√£ retweet...");

  const baseUrls = [
    "https://anhquan.com",
    "https://anhquan.com/airdrop",
    "https://anhquan.io",
  ];

  // Load file replied_users.json theo conversationId
  let repliedUsersMap: Record<string, string[]> = {};
  const repliedUsersPath = "replied_users.json";

  if (fs.existsSync(repliedUsersPath)) {
    try {
      const data = fs.readFileSync(repliedUsersPath, "utf-8");
      repliedUsersMap = JSON.parse(data) || {};
    } catch (error) {
      console.error("L·ªói khi ƒë·ªçc file replied_users.json:", error);
      repliedUsersMap = {};
    }
  } else {
    console.log("Kh√¥ng t√¨m th·∫•y file replied_users.json, t·∫°o m·ªõi...");
    repliedUsersMap = {};
  }

  // Load danh s√°ch reply l·ªói n·∫øu c√≥
  const failedReplies: Array<{
    username: string;
    tweetId: string;
    reason: string;
    timestamp: string;
  }> = [];

  if (fs.existsSync("failed_replies.json")) {
    try {
      const data = fs.readFileSync("failed_replies.json", "utf-8");
      const existingFailures = JSON.parse(data);
      if (Array.isArray(existingFailures)) {
        failedReplies.push(...existingFailures);
      }
    } catch (error) {
      console.error("L·ªói khi ƒë·ªçc file failed_replies.json:", error);
    }
  }

  // L·ªçc danh s√°ch user duy nh·∫•t
  const uniqueUsers = Array.from(new Set(tweetUsers.map((u) => u.username)));
  console.log("S·ªë l∆∞·ª£ng users ƒë·ªôc nh·∫•t c·∫ßn ki·ªÉm tra:", uniqueUsers.length);

  // Nh√≥m tweet theo username
  const userTweets: { [username: string]: string[] } = {};
  tweetUsers.forEach(({ username, tweetId }) => {
    if (!userTweets[username]) userTweets[username] = [];
    userTweets[username].push(tweetId);
  });

  for (const username of uniqueUsers) {
    try {
      const alreadyReplied = repliedUsersMap[tweetId]?.includes(username);
      if (alreadyReplied) {
        console.log(
          `@${username} ƒë√£ ƒë∆∞·ª£c reply trong thread n√†y (ID: ${tweetId}), b·ªè qua.`
        );
        continue;
      }

      const retweetCheck = await checkRetweet(username, tweetId);
      const isRetweeted =
        retweetCheck && (retweetCheck as any).is_retweeted === true;

      if (isRetweeted) {
        console.log(`@${username} ƒë√£ retweet! ƒêang reply...`);

        const randomUrl = baseUrls[Math.floor(Math.random() * baseUrls.length)];
        const uniqueUrl = `${randomUrl}?ref=${Math.floor(
          Math.random() * 10000
        )}`;
        const message = variateMessage(`airdrop link: ${uniqueUrl}`);
        const userTweetId = userTweets[username][0];

        await randomSleep(3000, 10000);

        try {
          await scraper.sendTweet(message, userTweetId);
          console.log(
            `‚úÖ ƒê√£ reply "${message}" ƒë·∫øn @${username} (tweet ID: ${userTweetId})`
          );

          if (!repliedUsersMap[tweetId]) {
            repliedUsersMap[tweetId] = [];
          }
          repliedUsersMap[tweetId].push(username);

          fs.writeFileSync(
            repliedUsersPath,
            JSON.stringify(repliedUsersMap, null, 2)
          );
        } catch (replyError: any) {
          console.error(`‚ùå L·ªói khi reply ƒë·∫øn @${username}:`, replyError);

          failedReplies.push({
            username,
            tweetId: userTweetId,
            reason: replyError.message || "Unknown error",
            timestamp: new Date().toISOString(),
          });

          fs.writeFileSync(
            "failed_replies.json",
            JSON.stringify(failedReplies, null, 2)
          );

          try {
            console.log(`Th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø cho @${username}...`);
            const altMessage = `Hey @${username}, check this out: ${uniqueUrl}`;
            await scraper.sendTweet(altMessage, userTweetId);
            console.log(`‚úÖ Th·ª≠ l·∫°i th√†nh c√¥ng v·ªõi alt message.`);

            if (!repliedUsersMap[tweetId]) {
              repliedUsersMap[tweetId] = [];
            }
            repliedUsersMap[tweetId].push(username);
            fs.writeFileSync(
              repliedUsersPath,
              JSON.stringify(repliedUsersMap, null, 2)
            );
          } catch (altError) {
            console.error(`‚ùå V·∫´n kh√¥ng th·ªÉ reply cho @${username}:`, altError);
          }
        }
      } else {
        console.log(`@${username} ch∆∞a retweet, b·ªè qua.`);
      }

      await randomSleep(8000, 20000);
    } catch (error) {
      console.error(`‚ùå L·ªói khi x·ª≠ l√Ω user @${username}:`, error);
      await randomSleep(15000, 30000);
    }
  }
}

// Khai b√°o bi·∫øn global ƒë·ªÉ l∆∞u scraper instance
declare global {
  var scraper: Scraper;
}

// H√†m l∆∞u cookie v√†o file
async function cacheCookies(cookies: any) {
  try {
    fs.writeFileSync("cookies.json", JSON.stringify(cookies, null, 2));
    console.log("ƒê√£ l∆∞u cookie v√†o file cookies.json");
  } catch (error) {
    console.error("L·ªói khi l∆∞u cookie:", error);
  }
}

// H√†m l·∫•y cookie t·ª´ file
async function getCachedCookies() {
  try {
    if (fs.existsSync("cookies.json")) {
      const cookiesData = fs.readFileSync("cookies.json", "utf-8");
      if (cookiesData && cookiesData.trim() !== "") {
        console.log("ƒê√£ t√¨m th·∫•y file cookies.json");
        return JSON.parse(cookiesData);
      }
    }
    console.log("Kh√¥ng t√¨m th·∫•y file cookies.json ho·∫∑c file r·ªóng");
    return null;
  } catch (error) {
    console.error("L·ªói khi ƒë·ªçc cookie:", error);
    return null;
  }
}

// H√†m login Twitter
async function login(
  scraper: Scraper,
  username: string,
  password: string,
  email: string,
  fa: string
) {
  try {
    // Th·ª≠ s·ª≠ d·ª•ng cookie ƒë√£ cache
    const cachedCookies = await getCachedCookies();
    if (cachedCookies) {
      console.log("ƒêang th·ª≠ ƒëƒÉng nh·∫≠p b·∫±ng cookie ƒë√£ l∆∞u...");

      // Chuy·ªÉn ƒë·ªïi cookie t·ª´ object sang string format
      const cookieStrings = cachedCookies.map(
        (cookie: any) =>
          `${cookie.name || cookie.key}=${cookie.value}; Domain=${
            cookie.domain
          }; Path=${cookie.path}; ${cookie.secure ? "Secure" : ""}; ${
            cookie.httpOnly ? "HttpOnly" : ""
          }; SameSite=${cookie.sameSite || "Lax"}`
      );

      if (cookieStrings.length > 0) {
        // Set cookie v√†o scraper
        await scraper.setCookies(cookieStrings);

        // Ki·ªÉm tra xem ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng ch∆∞a
        const isLoggedIn = await scraper.isLoggedIn();
        if (isLoggedIn) {
          console.log("ƒêƒÉng nh·∫≠p th√†nh c√¥ng b·∫±ng cookie ƒë√£ l∆∞u");
          return true;
        } else {
          console.log("Cookie ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá, c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i");
          // Kh√¥ng x√≥a cookie, ch·ªâ ƒëƒÉng nh·∫≠p l·∫°i v√† c·∫≠p nh·∫≠t
        }
      }
    }

    // N·∫øu kh√¥ng c√≥ cookie ho·∫∑c cookie kh√¥ng h·ª£p l·ªá, ƒëƒÉng nh·∫≠p b√¨nh th∆∞·ªùng
    console.log("ƒêƒÉng nh·∫≠p b·∫±ng th√¥ng tin t√†i kho·∫£n...");
    await scraper.login(username, password, email, fa);
    console.log("ƒêƒÉng nh·∫≠p Twitter th√†nh c√¥ng");

    // L∆∞u cookie m·ªõi
    const cookies = await scraper.getCookies();
    await cacheCookies(cookies);

    return true;
  } catch (error) {
    console.error("L·ªói khi ƒëƒÉng nh·∫≠p:", error);
    return false;
  }
}

// // H√†m main ch·∫°y c·∫£ 2 ch·ª©c nƒÉng: reply tweet v√† l·∫•y tweet detail
// async function main() {
//   // Ki·ªÉm tra xem c√≥ ƒëang trong gi·ªù ngh·ªâ hay kh√¥ng (1-5 gi·ªù s√°ng)
//   const currentHour = new Date().getHours();
//   if (currentHour >= 1 && currentHour <= 5) {
//     console.log(
//       `ƒêang trong gi·ªù ngh·ªâ (${currentHour} gi·ªù s√°ng), bot s·∫Ω ngh·ªâ ng∆°i ƒë·ªÉ tr√°nh b·ªã ph√°t hi·ªán l√† ho·∫°t ƒë·ªông t·ª± ƒë·ªông.`
//     );
//     return;
//   }

//   // Kh·ªüi t·∫°o instance cho genAI v√† scraper
//   const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");
//   const scraper = new Scraper();

//   // L∆∞u scraper v√†o bi·∫øn global ƒë·ªÉ s·ª≠ d·ª•ng ·ªü c√°c h√†m kh√°c
//   global.scraper = scraper;

//   // Th√¥ng tin ƒëƒÉng nh·∫≠p Twitter t·ª´ .env
//   const username = process.env.TWITTER_USERNAME || "";
//   const password = process.env.TWITTER_PASSWORD || "";
//   const email = process.env.TWITTER_EMAIL || "";
//   const fa = process.env.TWITTER_2FA_SECRET || "";

//   console.log("B·∫Øt ƒë·∫ßu qu√° tr√¨nh x·ª≠ l√Ω...");

//   // ƒêƒÉng nh·∫≠p Twitter
//   const loggedIn = await login(scraper, username, password, email, fa);
//   if (!loggedIn) {
//     console.error("Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p v√†o Twitter. ƒêang d·ª´ng ch∆∞∆°ng tr√¨nh...");
//     return;
//   }

//   // Reply tweet v√† l·∫•y k·∫øt qu·∫£ tr·∫£ v·ªÅ
//   console.log("ƒêang ch·∫°y replyTweet...");
//   const result = await replyTweet(genAI, scraper, username);
//   const replyTweets = result.tweets;

//   // Ch·ªâ ki·ªÉm tra tweet thread v√† retweet n·∫øu ƒë√£ reply m·ªôt tweet m·ªõi
//   if (result.repliedNewTweet && result.repliedTweetInfo) {
//     console.log("ƒê√£ reply tweet m·ªõi, ti·∫øp t·ª•c ki·ªÉm tra retweet...");

//     // L·∫•y th√¥ng tin t·ª´ tweet ƒë√£ reply
//     const conversationId = result.repliedTweetInfo.conversationId;

//     if (conversationId) {
//       console.log("X·ª≠ l√Ω conversationId:", conversationId);

//       // L·∫•y tweet g·ªëc t·ª´ conversationId
//       const originalTweet = await scraper.getTweet(conversationId);

//       if (originalTweet && originalTweet.id) {
//         console.log("ID c·ªßa tweet g·ªëc:", originalTweet.id);
//         // S·ª≠ d·ª•ng ID c·ªßa tweet g·ªëc ƒë·ªÉ l·∫•y thread
//         await getTweetDetail(originalTweet.id);
//       } else {
//         console.log("S·ª≠ d·ª•ng conversation ID ƒë·ªÉ l·∫•y thread...");
//         await getTweetDetail(conversationId);
//       }
//     } else {
//       console.log("Kh√¥ng c√≥ conversationId, b·ªè qua ki·ªÉm tra retweet.");
//     }
//   } else if (replyTweets.length > 0) {
//     // Kh√¥ng c√≥ tweet m·ªõi n√†o ƒë∆∞·ª£c reply, nh∆∞ng v·∫´n c√≥ tweets
//     console.log("Kh√¥ng c√≥ tweet m·ªõi n√†o ƒë∆∞·ª£c reply, b·ªè qua ki·ªÉm tra retweet.");
//   } else {
//     console.log("Kh√¥ng c√≥ tweet n√†o ƒë·ªÉ x·ª≠ l√Ω.");
//   }
// }

// main().catch((error) => {
//   console.error("L·ªói trong qu√° tr√¨nh th·ª±c thi:", error);
// });

// ==== THAY main() TH√ÄNH loopForever() ====

async function loopForever() {
  const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");
  const scraper = new Scraper();
  global.scraper = scraper;

  const username = process.env.TWITTER_USERNAME || "";
  const password = process.env.TWITTER_PASSWORD || "";
  const email = process.env.TWITTER_EMAIL || "";
  const fa = process.env.TWITTER_2FA_SECRET || "";

  // Ch·ªâ ƒëƒÉng nh·∫≠p 1 l·∫ßn
  const loggedIn = await login(scraper, username, password, email, fa);
  if (!loggedIn) {
    console.error("Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p. D·ª´ng bot.");
    return;
  }

  console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng. B·∫Øt ƒë·∫ßu theo d√µi tweet m·ªõi...");

  while (true) {
    const currentHour = new Date().getHours();
    if (currentHour >= 1 && currentHour <= 5) {
      console.log("üåô ƒêang trong gi·ªù ngh·ªâ (1‚Äì5h s√°ng), ch·ªù 30 ph√∫t...");
      await randomSleep(30 * 60 * 1000, 30 * 60 * 1000); // 30 ph√∫t ngh·ªâ
      continue;
    }

    try {
      const result = await replyTweet(genAI, scraper, username);
      const replyTweets = result.tweets;

      if (result.repliedNewTweet && result.repliedTweetInfo) {
        console.log("üì¨ C√≥ tweet m·ªõi ƒë∆∞·ª£c reply, ki·ªÉm tra thread & retweet...");

        const conversationId = result.repliedTweetInfo.conversationId;
        if (conversationId) {
          const originalTweet = await scraper.getTweet(conversationId);
          const rootId = originalTweet?.id || conversationId;
          await getTweetDetail(rootId);
        }
      } else {
        console.log("‚è≥ Kh√¥ng c√≥ tweet m·ªõi, ch·ªù 2 ph√∫t r·ªìi ki·ªÉm tra l·∫°i...");
      }
    } catch (err) {
      console.error("‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω v√≤ng l·∫∑p:", err);
    }

    // Ngh·ªâ gi·ªØa m·ªói l·∫ßn check tweet ƒë·ªÉ tr√°nh spam
    await randomSleep(2 * 60 * 1000, 3 * 60 * 1000); // 2‚Äì3 ph√∫t
  }
}

// ==== KH·ªûI ƒê·ªòNG BOT ====

loopForever().catch((error) => {
  console.error("Bot g·∫∑p l·ªói kh√¥ng mong mu·ªën:", error);
});
